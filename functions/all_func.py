from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import Pizza, Combo, Snacks, Sauces, Desserts, Drinks, Kids_Love, OtherGoods
from database.db import SessionLocal
from sqlalchemy.future import select
from database.tables import Order  # –ë–∞ –º–æ–¥–µ–ª–∏ —Ö—É–¥ –∏—Å—Ç–∏–Ω–æ–¥ –∫—É–Ω–µ–¥
from sqlalchemy.sql import func
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –§—É–Ω–∫—Å–∏—è–∏ –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞–≤–æ–¥“≥–æ–∏ —Å–∞–±–∞–¥
async def get_cart_items(user_id: int):
    session = SessionLocal()
    # –ô–æ–º –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–±–∞–¥ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞
    result = await session.execute(select(Cart).filter(Cart.order.has(user_id=user_id)))
    cart = result.scalars().first()

    if not cart:
        return []  # –ê–≥–∞—Ä —Å–∞–±–∞–¥ –ø–∞–π–¥–æ –Ω–∞—à–∞–≤–∞–¥, —Ä”Ø–π—Ö–∞—Ç —Ö–æ–ª”£ –±–∞—Ä–º–µ–≥–∞—Ä–¥–∞–¥

    cart_items = []
    # –ë–∞ “≥–∞—Ä —è–∫ –∞—à—ë–∏ —Å–∞–±–∞–¥ –º–∞—ä–ª—É–º–æ—Ç—Ä–æ –≥–∏—Ä–µ–º
    for cart_item in cart.items:
        # –ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç –º—É–≤–æ—Ñ–∏“õ–∏ product_type
        product_model = globals().get(cart_item.product_type.capitalize())
        if product_model:
            product = await session.execute(select(product_model).filter(product_model.id == cart_item.product_id))
            product = product.scalars().first()
            
            if product:
                cart_items.append({
                    'name': product.name,
                    'price': product.price,
                    'quantity': cart_item.quantity,
                    'image_url': product.image_url
                })
    
    return cart_items

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ–∏ –º–µ–Ω—é –±–æ –∏–ª–æ–≤–∞–∫—É–Ω”£ –±–∞—Ä–æ–∏ –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ —à—É–º–æ—Ä–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç
categories = {
    "pizza": "üçï Pizza",
    "combo": "ü•ô Combo",
    "snacks": "üçü Snacks",
    "desserts": "üç∞ Desserts",
    "drinks": "ü•§ Drinks",
    "sauces": "üßÇ Sauces",
    "kidslove": "üë∂ Kids Love",
    "othergoods": "üõí Other Goods"
}


# The model mappings
model_map = {
    "pizza": Pizza,
    "combo": Combo,
    "snacks": Snacks,
    "desserts": Desserts,
    "drinks": Drinks,
    "sauces": Sauces,
    "kidslove": Kids_Love,
    "othergoods": OtherGoods
}


# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ —ç“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ
async def get_category_keyboard():
    session = SessionLocal()
    keyboard_builder = InlineKeyboardBuilder()

    for key, label in categories.items():
        model = model_map.get(key)
        if model:
            # “ö–∏—Å–º–∏ “≥–∏—Å–æ–± –∫–∞—Ä–¥–∞–Ω–∏ —à—É–º–æ—Ä–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç
            stmt = select(func.count()).select_from(model)
            result = await session.execute(stmt)
            count = result.scalar() or 0
            
            # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ –±–æ –º–∞—ä–ª—É–º–æ—Ç–∏ –º—É–≤–æ—Ñ–∏“õ
            button_text = f"{label} ({count})"
            callback_data = f"category_{key}"
            keyboard_builder.button(text=button_text, callback_data=callback_data)

    # –¢–∞–Ω–∑–∏–º–∏ —Ç—É–≥–º–∞“≥–æ –¥–∞—Ä —Å–∞—Ç—Ä–∏ –ø–∞–π–¥–∞—Ä–ø–∞–π
    keyboard_builder.adjust(2)  # 2 —Ç—É–≥–º–∞ –¥–∞—Ä —è–∫ —Å–∞—Ç—Ä
    return keyboard_builder.as_markup()

# Create reply keyboard with styled options (to display at the bottom of the keyboard)
def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    # Row with a single button centered
    keyboard.add(KeyboardButton(text="üìã –ú–µ–Ω—é"))
    
    # Row with two buttons side by side
    keyboard.row(
        KeyboardButton(text="üì¶ –§–∞—Ä–º–æ–∏—à–æ—Ç"), 
        KeyboardButton(text="üõí –°–∞–±–∞–¥")
    )
    
    # Row with a single button spanning the width
    keyboard.add(KeyboardButton(text="üë§ –ú–∞—ä–ª—É–º–æ—Ç“≥–æ–∏ —à–∞—Ö—Å–∏–∏ –º–∞–Ω"))
    
    return keyboard
    
    
    

# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ —ç“∑–æ–¥–∏ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£
async def main_menu():
    builder = InlineKeyboardBuilder()

    categories = [
        ("–ü–∏—Ü—Ü–∞ üçï", "pizza"),
        ("–ö–æ–º–±–æ üç±", "combo"),
        ("–ó–∞–∫—É—Å–∫–∏ üçü", "snacks"),
        ("–î–µ—Å–µ—Ä—Ç—ã üç∞", "desserts"),
        ("–ù–∞–ø–∏—Ç–∫–∏ ü•§", "drinks"),
        ("–°–æ—É—Å—ã ü•´", "sauces"),
        ("–õ—é–±—è—Ç –¥–µ—Ç–∏ üß∏", "kids_love"),
        ("–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã üì¶", "other_goods")
    ]

    # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ –±–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    for name, callback_data in categories:
        builder.button(text=name, callback_data=callback_data)

    # –¢–∞–Ω–∑–∏–º–∏ 2 —Ç—É–≥–º–∞ –¥–∞—Ä —è–∫ —Å–∞—Ç—Ä
    builder.adjust(2)

    # –ë–æ–∑–≥–∞—Ä–¥–æ–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    return builder.as_markup()


# –ö–æ–º–∞–Ω–¥–æ“≥–æ–∏ –±–æ—Ç
async def set_commands():
    from bot_file import bot
    commands = [
        types.BotCommand(command="/menu", description="–ú–µ–Ω—é –∞—Å–æ—Å”£"),
        types.BotCommand(command="/cart", description="–°–∞–±–∞–¥–∏ –º–∞–Ω"),
        types.BotCommand(command="/orders", description="–§–∞—Ä–º–æ–∏—à–æ—Ç–∏ –º–∞–Ω"),
        types.BotCommand(command="/profile", description="–ú–∞—ä–ª—É–º–æ—Ç“≥–æ–∏ —à–∞—Ö—Å–∏–∏ –º–∞–Ω"),
        types.BotCommand(command="/admin_menu", description="–ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω"),
    ]
    await bot.set_my_commands(commands)
    
    
    
# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ç–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ
async def get_order_history(user_id):
    session = SessionLocal()
    # “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –∞–∑ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
    orders = session.query(Order).filter(Order.user_id == user_id).all()
    
    order_history = []
    for order in orders:
        order_details = {
            "status": order.status.value,
            "items": []
        }
        
        for item in order.cart.items:
            product_model = globals()[item.product_type.capitalize()]  # –ë–∞—Ä–æ–∏ –º—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–±–ª–∏—Ç—Å–∞
            product = session.query(product_model).filter(product_model.id == item.product_id).first()
            if product:
                order_details["items"].append({
                    "name": product.name,
                    "quantity": item.quantity,
                    "price": product.price,
                    "total_price": product.price * item.quantity,
                    "image_url": product.image_url
                })
        
        order_details["total_order_price"] = sum(item["total_price"] for item in order_details["items"])
        order_history.append(order_details)
    
    return order_history
    
    
# –õ–æ–≥–∏–∫–∞ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ö—Ä–æ“∑–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —à–∞—Ö—Å”£ –∞–∑ –±–∞–∑–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
async def get_user_info(user_id: int):
    session = SessionLocal()
    # –î–∞—Ä –±–∞–∑–∞ “∑—É—Å—Ç—É“∑”Ø–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –∫–æ—Ä–±–∞—Ä –±–æ user_id
    result = await session.execute(
        select(Order).where(Order.user_id == user_id).order_by(Order.id.desc())
    )
    last_order = result.scalars().first()  # –û—Ö–∏—Ä–∏–Ω –∑–∞–∫–∞–∑–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞

    if last_order:
        return {
            "name": last_order.customer_name,
            "phone": last_order.phone_number,
            "address": "–ú–∞—ä–ª—É–º–æ—Ç –Ω–µ—Å—Ç"  # –ê–≥–∞—Ä –∞–¥—Ä–µ—Å –Ω–∞–¥–æ—à—Ç–∞ –±–æ—à–∞–¥
        }
    else:
        return {
            "name": "–ù–æ–º –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç",
            "phone": "–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥",
            "address": "–ê–¥—Ä–µ—Å –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥"
        }
        
        
        

