from aiogram import Router, types
from sqlalchemy.future import select
from database.tables import OrderStatus  # –ë–∞ –º–æ–¥–µ–ª–∏ —Ö—É–¥ –∏—Å—Ç–∏–Ω–æ–¥ –∫—É–Ω–µ–¥
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import Cart, SessionLocal
admin_accept = Router()


# “≤–æ–¥–∏—Å–∞ –±–∞—Ä–æ–∏ "üè† –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞"
@admin_accept.message(lambda message: message.text == "üè† –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞")
async def show_delivered_orders(message: types.Message):
    """
    “≤–∞–º–∞–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ "–†–∞—Å–æ–Ω–∏–¥–∞ —à—É–¥–∞–∞—Å—Ç" (DELIVERED) “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–Ω–¥, –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.
    """
    session = SessionLocal()
    query = select(Cart).where(Cart.status == OrderStatus.DELIVERED)
    result = await session.execute(query)
    delivered_orders = result.scalars().all()

    if not delivered_orders:
        await message.answer("üè† “≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ —Ä–∞—Å–æ–Ω–∏–¥–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
        return

    response = "üìã –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞:\n\n"
    for order in delivered_orders:
        order_details = f"üÜî ID: {order.id}\n"
        for item in order.items:
            order_details += f"‚Ä¢ {item.product_type.capitalize()} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
        order_details += "\n"
        response += order_details

    await message.answer(response)





@admin_accept.message(lambda message: message.text == "üöö –ó–∞–∫–∞–∑“≥–æ–∏ –¥–∞—Ä —Ä–æ“≥")
async def show_on_road_orders(message: types.Message):
    """
    “≤–∞–º–∞–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ "–î–∞—Ä —Ä–æ“≥" (IN_PROGRESS) “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–Ω–¥, –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.
    """
    session = SessionLocal()
    query = select(Cart).where(Cart.status == OrderStatus.IN_PROGRESS)
    result = await session.execute(query)
    in_progress_orders = result.scalars().all()

    if not in_progress_orders:
        await message.answer("üì¶ “≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ –¥–∞—Ä —Ä–æ“≥ –Ω–µ—Å—Ç.")
        return

    response = "üìã –ó–∞–∫–∞–∑“≥–æ–∏ –¥–∞—Ä —Ä–æ“≥:\n\n"
    for order in in_progress_orders:
        order_details = f"üÜî ID: {order.id}\n"
        for item in order.items:
            order_details += f"‚Ä¢ {item.product_type.capitalize()} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
        order_details += "\n"
        response += order_details

    await message.answer(response)




ORDERS_PER_PAGE = 5


# –§—É–Ω–∫—Å–∏—è–∏ –ø–∞—Ö—à–∏ —Ç—É–≥–º–∞–∏ "üìã –ó–∞–∫–∞–∑“≥–æ–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£"
@admin_accept.message(lambda message: message.text == "üìã –ó–∞–∫–∞–∑“≥–æ–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£ (“õ–∞–±—É–ª –Ω–∞—à—É–¥–∞)")
async def show_pending_orders(message: types.Message):
    page = 1  # –°–∞“≥–∏—Ñ–∞–∏ –∞–≤–≤–∞–ª
    user_id = message.user.id
    await send_orders_page(user_id, page)


# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –∑–∞–∫–∞–∑“≥–æ–∏ —Å–∞“≥–∏—Ñ–∞–∏ –∏–Ω—Ç–∏—Ö–æ–±—à—É–¥–∞
async def send_orders_page(chat_id: int, page: int):
    async with SessionLocal() as session:  # –°–µ—Å—Å–∏—è–∏ –ø–æ–π–≥–æ“≥–∏ –¥–æ–¥–∞“≥–æ
        offset = (page - 1) * ORDERS_PER_PAGE
        result = await session.execute(
            select(Order).where(Order.status == OrderStatus.PENDING).offset(offset).limit(ORDERS_PER_PAGE)
        )
        orders = result.scalars().all()

        if not orders:
            await admin_accept.bot.send_message(chat_id, "“≤–µ“∑ –∑–∞–∫–∞–∑–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£ –Ω–µ—Å—Ç.")
            return

        keyboard = InlineKeyboardMarkup()
        text = "üìã –ó–∞–∫–∞–∑“≥–æ–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£:\n\n"
        for order in orders:
            text += (
                f"ID: {order.id}\n"
                f"–ú—É—à—Ç–∞—Ä”£: {order.customer_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n"
                f"–ù–∏—à–æ–Ω”£: {order.address}\n\n"
            )
            keyboard.add(
                InlineKeyboardButton(text="“ö–∞–±—É–ª –∫–∞—Ä–¥–∞–Ω", callback_data=f"accept_{order.id}"),
                InlineKeyboardButton(text="–†–∞–¥ –∫–∞—Ä–¥–∞–Ω", callback_data=f"reject_{order.id}")
            )

        # –¢—É–≥–º–∞“≥–æ–∏ —Å–∞“≥–∏—Ñ–∞–±–∞–Ω–¥”£
        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–µ—à–∏–Ω–∞", callback_data=f"page_{page-1}"))
        if len(orders) == ORDERS_PER_PAGE:
            navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –ë–∞—ä–¥”£", callback_data=f"page_{page+1}"))

        if navigation_buttons:
            keyboard.add(*navigation_buttons)

        await admin_accept.bot.send_message(chat_id, text, reply_markup=keyboard)


# Callback –±–∞—Ä–æ–∏ “õ–∞–±—É–ª –≤–∞ —Ä–∞–¥ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–∫–∞–∑
@admin_accept.callback_query(lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
async def handle_order_action(callback_query: types.CallbackQuery):
    action, order_id = callback_query.data.split("_")
    order_id = int(order_id)

    async with SessionLocal() as session:  # –°–µ—Å—Å–∏—è–∏ –ø–æ–π–≥–æ“≥–∏ –¥–æ–¥–∞“≥–æ
        order = await session.get(Order, order_id)

        if not order:
            await callback_query.message.edit_text("–ó–∞–∫–∞–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return

        if action == "accept":
            order.status = OrderStatus.ACCEPTED
            await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ –±–æ ID {order_id} “õ–∞–±—É–ª —à—É–¥.")
        elif action == "reject":
            order.status = OrderStatus.REJECTED
            await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ –±–æ ID {order_id} —Ä–∞–¥ —à—É–¥.")

        await session.commit()


# Callback –±–∞—Ä–æ–∏ –ø–∞–π–º–æ–∏—à –±–∞–π–Ω–∏ —Å–∞“≥–∏—Ñ–∞“≥–æ
@admin_accept.callback_query(lambda call: call.data.startswith("page_"))
async def handle_pagination(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[1])
    await send_orders_page(callback_query.message.chat.id, page)

@admin_accept.message(lambda message: message.text == "–ó–∞–∫–∞–∑“≥–æ–∏ “õ–∞–±—É–ª—à—É–¥–∞")
async def handle_accepted_orders(message: types.Message):
    async with SessionLocal() as session:
        # –ë–∞—Ö–æ–¥–∏—Ä —Ñ–∞“≥–º–∏–¥–∞–Ω–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ ACCEPTED —à—É–¥–∞–∞–Ω–¥
        query = select(Cart).where(Cart.status == OrderStatus.ACCEPTED)
        result = await session.execute(query)
        accepted_orders = result.scalars().all()

        # –ê–≥–∞—Ä —è–≥–æ–Ω –∑–∞–∫–∞–∑ –Ω–∞–±–æ—à–∞–¥
        if not accepted_orders:
            await message.answer("“≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ “õ–∞–±—É–ª –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä–¥–∞–Ω–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –∑–∞–∫–∞–∑“≥–æ
        response = "–ó–∞–∫–∞–∑“≥–æ–∏ “õ–∞–±—É–ª—à—É–¥–∞:\n\n"
        for order in accepted_orders:
            order_details = f"ID: {order.id}\n"
            for item in order.items:
                order_details += f"- {item.product_type} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
            order_details += f"“≤–æ–ª–∞—Ç–∏ —É–º—É–º”£: ACCEPTED\n\n"
            response += order_details

        await message.answer(response)
