from aiogram import Router, types
from sqlalchemy.future import select
from database.tables import Cart, OrderStatus  # –ë–∞ –º–æ–¥–µ–ª–∏ —Ö—É–¥ –∏—Å—Ç–∏–Ω–æ–¥ –∫—É–Ω–µ–¥
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import SessionLocal
admin_accept = Router()


# “≤–æ–¥–∏—Å–∞ –±–∞—Ä–æ–∏ "üè† –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞"
@admin_accept.message(lambda message: message.text == "üè† –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞")
async def show_delivered_orders(message: types.Message):
    """
    “≤–∞–º–∞–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ "–†–∞—Å–æ–Ω–∏–¥–∞ —à—É–¥–∞–∞—Å—Ç" (DELIVERED) “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–Ω–¥, –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.
    """
    session = SessionLocal()
    query = select(Cart).where(Cart.status == OrderStatus.DELIVERED)
    result = await session.execute(query)
    delivered_orders = result.scalars().all()

    if not delivered_orders:
        await message.answer("üè† “≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ —Ä–∞—Å–æ–Ω–∏–¥–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
        return

    response = "üìã –ó–∞–∫–∞–∑“≥–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞—à—É–¥–∞:\n\n"
    for order in delivered_orders:
        order_details = f"üÜî ID: {order.id}\n"
        for item in order.items:
            order_details += f"‚Ä¢ {item.product_type.capitalize()} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
        order_details += "\n"
        response += order_details

    await message.answer(response)





@admin_accept.message(lambda message: message.text == "üöö –ó–∞–∫–∞–∑“≥–æ–∏ –¥–∞—Ä —Ä–æ“≥")
async def show_on_road_orders(message: types.Message):
    """
    “≤–∞–º–∞–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ "–î–∞—Ä —Ä–æ“≥" (IN_PROGRESS) “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–Ω–¥, –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.
    """
    session = SessionLocal()
    query = select(Cart).where(Cart.status == OrderStatus.IN_PROGRESS)
    result = await session.execute(query)
    in_progress_orders = result.scalars().all()

    if not in_progress_orders:
        await message.answer("üì¶ “≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ –¥–∞—Ä —Ä–æ“≥ –Ω–µ—Å—Ç.")
        return

    response = "üìã –ó–∞–∫–∞–∑“≥–æ–∏ –¥–∞—Ä —Ä–æ“≥:\n\n"
    for order in in_progress_orders:
        order_details = f"üÜî ID: {order.id}\n"
        for item in order.items:
            order_details += f"‚Ä¢ {item.product_type.capitalize()} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
        order_details += "\n"
        response += order_details

    await message.answer(response)


async def show_pending_orders(message: types.Message):
    # “≤–∞–º–∞–∏ –∑–∞–∫–∞–∑“≥–æ–∏ –∏–Ω—Ç–∏–∑–æ—Ä–∏—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –º–µ–∫—É–Ω–µ–º
    session = SessionLocal()
    query = select(Cart).where(Cart.status == OrderStatus.PENDING)
    result = await session.execute(query)
    pending_orders = result.scalars().all()

    if not pending_orders:
        await message.answer("–î–∞—Ä “≥–æ–ª–∏ “≥–æ–∑–∏—Ä —è–≥–æ–Ω –∑–∞–∫–∞–∑–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£ –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥.")
        return

    for order in pending_orders:
        text = f"–ó–∞–∫–∞–∑ #{order.id}:\n"
        for item in order.items:
            text += f"- {item.quantity} x {item.product_type.capitalize()} (ID: {item.product_id})\n"
        text += f"\n“≤–æ–ª–∞—Ç–∏ –∑–∞–∫–∞–∑: {order.status.value}\n"

        # –¢—É–≥–º–∞–∏ “õ–∞–±—É–ª —ë –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–∫–∞–∑
        keyboard = InlineKeyboardMarkup(row_width=2)
        accept_button = InlineKeyboardButton(text="“ö–∞–±—É–ª", callback_data=f"accept_order_{order.id}")
        decline_button = InlineKeyboardButton(text="–ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data=f"decline_order_{order.id}")
        keyboard.add(accept_button, decline_button)

        await message.answer(text, reply_markup=keyboard)


@admin_accept.message(lambda message: message.text == "–ó–∞–∫–∞–∑“≥–æ–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£")
async def handle_pending_orders(message: types.Message):
    async with SessionLocal() as session:
        await show_pending_orders(session, message)
        
@admin_accept.callback_query(lambda c: c.data.startswith("accept_order_"))
async def accept_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[-1])

    async with SessionLocal() as session:
        query = select(Cart).where(Cart.id == order_id)
        result = await session.execute(query)
        order = result.scalar_one_or_none()

        if order:
            order.status = OrderStatus.ACCEPTED
            await session.commit()
            await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥.")
        else:
            await callback_query.message.edit_text("–ó–∞–∫–∞–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥.")

@admin_accept.callback_query(lambda c: c.data.startswith("decline_order_"))
async def decline_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[-1])

    async with SessionLocal() as session:
        query = select(Cart).where(Cart.id == order_id)
        result = await session.execute(query)
        order = result.scalar_one_or_none()

        if order:
            order.status = OrderStatus.PENDING  # –Å “≥–æ–ª–∞—Ç–∏ –¥–∏–≥–∞—Ä–µ, –∫–∏ "–±–µ–∫–æ—Ä—à—É–¥–∞"-—Ä–æ –∏—Ñ–æ–¥–∞ –º–µ–∫—É–Ω–∞–¥
            await session.commit()
            await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")
        else:
            await callback_query.message.edit_text("–ó–∞–∫–∞–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥.")


@admin_accept.message(lambda message: message.text == "–ó–∞–∫–∞–∑“≥–æ–∏ “õ–∞–±—É–ª—à—É–¥–∞")
async def handle_accepted_orders(message: types.Message):
    async with SessionLocal() as session:
        # –ë–∞—Ö–æ–¥–∏—Ä —Ñ–∞“≥–º–∏–¥–∞–Ω–∏ –∑–∞–∫–∞–∑“≥–æ–µ, –∫–∏ ACCEPTED —à—É–¥–∞–∞–Ω–¥
        query = select(Cart).where(Cart.status == OrderStatus.ACCEPTED)
        result = await session.execute(query)
        accepted_orders = result.scalars().all()

        # –ê–≥–∞—Ä —è–≥–æ–Ω –∑–∞–∫–∞–∑ –Ω–∞–±–æ—à–∞–¥
        if not accepted_orders:
            await message.answer("“≤–æ–ª–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ “õ–∞–±—É–ª –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä–¥–∞–Ω–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –∑–∞–∫–∞–∑“≥–æ
        response = "–ó–∞–∫–∞–∑“≥–æ–∏ “õ–∞–±—É–ª—à—É–¥–∞:\n\n"
        for order in accepted_orders:
            order_details = f"ID: {order.id}\n"
            for item in order.items:
                order_details += f"- {item.product_type} (ID: {item.product_id}), –ú–∏“õ–¥–æ—Ä: {item.quantity}\n"
            order_details += f"“≤–æ–ª–∞—Ç–∏ —É–º—É–º”£: ACCEPTED\n\n"
            response += order_details

        await message.answer(response)
