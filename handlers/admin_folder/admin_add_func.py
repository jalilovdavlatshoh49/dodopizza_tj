from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from sqlalchemy.future import select
from database.tables import Pizza, Combo, Snacks, Desserts, Drinks, Sauces, Kidslove, OtherGoods
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database.db import SessionLocal
# –ú–æ–¥–µ–ª–∏ FSM –±–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç
class AddProductFSM(StatesGroup):
    category = State()
    name = State()
    description = State()
    price = State()
    image_url = State()

# Router
admin_add_func_router = Router()



# –ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ
categories = [
    ("–ü–∏—Ü—Ü–∞ üçï", "pizza"),
    ("–ö–æ–º–±–æ üç±", "combo"),
    ("–ó–∞–∫—É—Å–∫–∏ üçü", "snacks"),
    ("–î–µ—Å–µ—Ä—Ç—ã üç∞", "desserts"),
    ("–ù–∞–ø–∏—Ç–∫–∏ ü•§", "drinks"),
    ("–°–æ—É—Å—ã ü•´", "sauces"),
    ("–õ—é–±—è—Ç –¥–µ—Ç–∏ üß∏", "kids_love"),
    ("–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã üì¶", "other_goods")
]

# –¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ
async def categories_keyboard():
    keyboard_builder = InlineKeyboardBuilder()
    for name, callback_data in categories:
        keyboard_builder.add(
            InlineKeyboardButton(text=name, callback_data=callback_data)
        )
    keyboard_builder.adjust(2)  # –¢–∞–Ω–∑–∏–º–∏ —Ç—É–≥–º–∞“≥–æ –¥–∞—Ä 2 —Å—É—Ç—É–Ω
    return keyboard_builder.as_markup()

# –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "–ó–∞–º –∫–∞—Ä–¥–∞–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç"
@admin_add_func_router.message(lambda message: message.text == "‚ûï –ó–∞–º –∫–∞—Ä–¥–∞–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç")
async def add_product_start(message: types.Message, state: FSMContext):
    keyboard = await categories_keyboard()
    await message.answer("–õ—É—Ç—Ñ–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)
    await state.set_state(AddProductFSM.category)

# Callback –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
@admin_add_func_router.callback_query(lambda call: call.data in [category[1] for category in categories])
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data
    await state.update_data(category=category)
    await callback.message.answer("–®—É–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫–∞—Ä–¥–µ–¥. –ù–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(AddProductFSM.name)

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç
@admin_add_func_router.message(AddProductFSM.name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–¢–∞–≤—Å–∏—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(AddProductFSM.description)

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ç–∞–≤—Å–∏—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç
@admin_add_func_router.message(AddProductFSM.description)
async def get_description(message: types.Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await message.answer("–ù–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º):")
    await state.set_state(AddProductFSM.price)

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç
@admin_add_func_router.message(AddProductFSM.price)
async def get_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–°—É—Ä–∞—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(AddProductFSM.image_url)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")



@admin_add_func_router.message(AddProductFSM.image_url)
async def get_image_url(message: types.Message, state: FSMContext):

    if message.photo:
        # Download the photo or get its file ID
        photo = message.photo[-1]  # Get the highest resolution photo
        image_url = photo.file_id
    else:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω —Å—É—Ä–∞—Ç —ë URL-–∏ –¥—É—Ä—É—Å—Ç–∏ —Ç–∞—Å–≤–∏—Ä—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.")
        await state.set_state(AddProductFSM.image_url)
        return

    await state.update_data(image_url=image_url)

    async with SessionLocal() as session:
        data = await state.get_data()
        category = data['category']
        name = data['name']
        description = data['description']
        price = data['price']

        table_mapping = {
            "pizza": Pizza,
            "combo": Combo,
            "snacks": Snacks,
            "desserts": Desserts,
            "drinks": Drinks,
            "sauces": Sauces,
            "kids_love": Kidslove,
            "other_goods": OtherGoods
        }

        if category not in table_mapping:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{category}' –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç. –õ—É—Ç—Ñ–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.")
            return

        product_model = table_mapping[category]
        new_product = product_model(
            name=name,
            description=description,
            price=price,
            image_url=image_url
        )
        session.add(new_product)
        await session.commit()

        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç –±–æ select
        query = select(product_model).where(
            product_model.name == name,
            product_model.description == description,
            product_model.price == price
        )
        result = await session.execute(query)
        filtered_product = result.scalars().first()

        # “∂–∞–≤–æ–± –¥–æ–¥–∞–Ω –±–æ –º–∞—ä–ª—É–º–æ—Ç–∏ –≥–∏—Ä–∏—Ñ—Ç–∞—à—É–¥–∞
        if filtered_product:
 
            builder = InlineKeyboardBuilder()

            # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "–ò–≤–∞–∑"
            builder.add(
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–≤–∞–∑",
                    callback_data=f"edit_{category}_{filtered_product.id}"
                        )
                    )

            # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "“≤–∞–∑—Ñ"
            builder.add(
                InlineKeyboardButton(
        text="‚ùå “≤–∞–∑—Ñ",
        callback_data=f"delete_{category}_{filtered_product.id}"
    )
)

            # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "–ë–∞ “õ–∞—Ñ–æ" –¥–∞—Ä “õ–∞—Ç–æ—Ä –∞–ª–æ“≥–∏–¥–∞
            builder.add(
    InlineKeyboardButton(
        text="üîô –ë–∞ “õ–∞—Ñ–æ",
        callback_data="exit_to_admin_menu"
    ),
    row=1  # –¢—É–≥–º–∞–∏ "–ë–∞ “õ–∞—Ñ–æ" –¥–∞—Ä “õ–∞—Ç–æ—Ä –∞–ª–æ“≥–∏–¥–∞ —Ö–æ“≥–∞–¥ –±—É–¥
)


            await message.answer_photo(
                photo=filtered_product.image_url,
                caption=(
                    f"<b>–ú–∞“≥—Å—É–ª–æ—Ç –±–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{category}' –∏–ª–æ–≤–∞ —à—É–¥!</b>\n\n"
                    f"<b>–ù–æ–º:</b> {filtered_product.name}\n"
                    f"<b>–¢–∞–≤—Å–∏—Ñ:</b> {filtered_product.description}\n"
                    f"<b>–ù–∞—Ä—Ö:</b> {filtered_product.price} —Å–æ–º–æ–Ω”£"
                ),
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥. –õ—É—Ç—Ñ–∞–Ω –±–æ—Ä–∏ –¥–∏–≥–∞—Ä —Å–∞–Ω“∑–µ–¥.")

    # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ “≥–æ–ª–∞—Ç–∏ FSM
    await state.clear()

