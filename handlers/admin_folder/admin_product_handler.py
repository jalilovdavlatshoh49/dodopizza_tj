from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.state import State, StatesGroup
from aiogram.types import ContentType
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.db import SessionLocal
from database.tables import *



# Router setup for admin product handling
admin_product_router = Router()



# Callback query-—Ä–æ –∫–æ—Ä–∫–∞—Ä–¥ –º–µ–∫—É–Ω–µ–º
@admin_product_router.callback_query(lambda c: c.data.startswith("admin_category_"))
async def handle_category(callback_query: CallbackQuery):
    category = callback_query.data.split("_")[-1]
    product_model = globals().get(category.capitalize())
    if not product_model:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–æ–¥—É—Ä—É—Å—Ç.", show_alert=True)
        return

    async with SessionLocal() as session:
        query = select(product_model)
        result = await session.execute(query)
        products = result.scalars().all()

        if not products:
            await callback_query.message.answer("–î–∞—Ä –∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞“≥—Å—É–ª–æ—Ç–µ –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥.")
            return
        await callback_query.message.delete()

        for product in products:
            product_text = (
                f"üì¶ {product.name}\n"
                f"üìú –¢–∞–≤—Å–∏—Ñ: {product.description}\n"
                f"üíµ –ù–∞—Ä—Ö–∏: {product.price} —Å–æ–º–æ–Ω”£\n"
            )

            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–≤–∞–∑",
                    callback_data=f"edit_{category}_{product.id}"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="‚ùå “≤–∞–∑—Ñ",
                    callback_data=f"delete_{category}_{product.id}"
                )
            )


            await callback_query.message.answer_photo(
                photo=product.image_url,
                caption=product_text,
                reply_markup=builder.as_markup()
            )

        

        total_products = len(products)
        page_text = f"–ê–∑ {total_products} –º–∞“≥—Å—É–ª–æ—Ç, {total_products} –¥–æ–Ω–∞ –Ω–∏—à–æ–Ω –¥–æ–¥–∞ —à—É–¥"
        # –ú–∞—Ç–Ω–∏ —à—É–º–æ—Ä–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç –≤–∞ —Ç—É–≥–º–∞–∏ –±–∞ “õ–∞—Ñ–æ
        exit_builder = InlineKeyboardBuilder()
        exit_builder.add(
            InlineKeyboardButton(
                text="üîô –ë–∞ “õ–∞—Ñ–æ",
                callback_data="exit_to_admin_menu"
            )
        )
        await callback_query.message.answer(
            page_text,
            reply_markup=exit_builder.as_markup()
        )


# Callback query –±–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç–∞—Å–¥–∏“õ–∏ “≥–∞–∑—Ñ
@admin_product_router.callback_query(lambda c: c.data.startswith("delete_"))
async def confirm_delete_product(callback_query: CallbackQuery):
    _, category, product_id = callback_query.data.split("_")

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚úÖ “≤–∞–∑—Ñ –∫–∞—Ä–¥–∞–Ω",
            callback_data=f"confirmdelete_{category}_{product_id}"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text="‚ùå “≤–∞–∑—Ñ –Ω–∞–∫–∞—Ä–¥–∞–Ω",
            callback_data=f"canceldelete_{category}_{product_id}"
        )
    )
    await callback_query.message.edit_reply_markup(
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()


# Callback query –±–∞—Ä–æ–∏ —Ç–∞—Å–¥–∏“õ–∏ “≥–∞–∑—Ñ
@admin_product_router.callback_query(lambda c: c.data.startswith("confirmdelete_"))
async def delete_product(callback_query: CallbackQuery):
    _, category, product_id = callback_query.data.split("_")
    product_model = globals().get(category.capitalize())
    if not product_model:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–æ–¥—É—Ä—É—Å—Ç.", show_alert=True)
        return

    async with SessionLocal() as session:
        query = select(product_model).filter(product_model.id == int(product_id))
        result = await session.execute(query)
        product = result.scalar_one_or_none()

        if product:
            await session.delete(product)
            await session.commit()
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç “≥–∞–∑—Ñ —à—É–¥.")
            await callback_query.message.delete()
        else:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)


# Callback query –±–∞—Ä–æ–∏ —Ä–∞–¥ –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–∑—Ñ
@admin_product_router.callback_query(lambda c: c.data.startswith("canceldelete_"))
async def cancel_delete(callback_query: CallbackQuery):
    _, category, product_id = callback_query.data.split("_")

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–≤–∞–∑",
            callback_data=f"edit_{category}_{product_id}"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text="‚ùå “≤–∞–∑—Ñ",
            callback_data=f"delete_{category}_{product_id}"
        )
    )

    if callback_query.message:
        await callback_query.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
    await callback_query.answer("“≤–∞–∑—Ñ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")
   


# Define the state machine
class ProductEdit(StatesGroup):
    waiting_for_attribute = State()  # State for attribute selection
    waiting_for_value = State()  # State for value input

# Handler for editing a product
@admin_product_router.callback_query(lambda c: c.data.startswith("edit_") and len(c.data.split("_")) == 3)
async def edit_product(callback_query: CallbackQuery):
    _, category, productid = callback_query.data.split("_")

    # Creating keyboard
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–æ–º", callback_data=f"edit_{category}_{productid}_name"),
        InlineKeyboardButton(text="–¢–∞–≤—Å–∏—Ñ", callback_data=f"edit_{category}_{productid}_description")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞—Ä—Ö", callback_data=f"edit_{category}_{productid}_price"),
        InlineKeyboardButton(text="–¢–∞—Å–≤–∏—Ä", callback_data=f"edit_{category}_{productid}_image_url")
    )

    await callback_query.message.answer(
        "–õ—É—Ç—Ñ–∞–Ω, –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥, –∫–∏ –∫–∞–¥–æ–º –º–∞—ä–ª—É–º–æ—Ç—Ä–æ –º–µ—Ö–æ“≥–µ–¥ –∏–≤–∞–∑ –∫—É–Ω–µ–¥:",
        reply_markup=builder.as_markup()
    )

# Handling the attribute selection
@admin_product_router.callback_query(lambda c: c.data.startswith("edit_") and len(c.data.split("_")) == 4)
async def choose_attribute(callback_query: CallbackQuery, state: FSMContext):
    _, category, product_id, attribute = callback_query.data.split("_")

    # Store product_id and category in FSM state
    await state.update_data(product_id=product_id, category=category, attribute=attribute)

    # Set state to ask for the value
    await state.set_state(ProductEdit.waiting_for_value)

    # Ask for the corresponding value based on the attribute selected
    messages = {
        "name": "–õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "description": "–õ—É—Ç—Ñ–∞–Ω, —Ç–∞–≤—Å–∏—Ñ–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "price": "–õ—É—Ç—Ñ–∞–Ω, –Ω–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        "image_url": "–õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–≤–∏—Ä—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥:"
    }
    await callback_query.message.answer(messages.get(attribute, "–ú–∞—ä–ª—É–º–æ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç!"))



admin_product_router = Router()

# Handling value input (name, description, price, image_url)
@admin_product_router.message(ProductEdit.waiting_for_value)
async def process_value(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    product_id = user_data['product_id']
    category = user_data['category']
    attribute = user_data['attribute']

    async with SessionLocal() as session:
        product_model = globals()[category.capitalize()]
        query = select(product_model).filter(product_model.id == int(product_id))
        result = await session.execute(query)
        product = result.scalars().first()

        if product:
            try:
                if attribute == "name":
                    product.name = message.text
                elif attribute == "description":
                    product.description = message.text
                elif attribute == "price":
                    product.price = int(message.text)
                elif attribute == "image_url" and message.photo:
                    # Downloading the photo
                    photo = message.photo[-1]
                    product.image_url = photo.file_id

                await session.commit()
                await message.answer(f"–ú–∞—ä–ª—É–º–æ—Ç–∏ {attribute} –∏–≤–∞–∑ —à—É–¥.")
            except Exception as e:
                await message.answer(f"–•–∞—Ç–æ–≥”£: {e}")
        else:
            await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!")

    # Finish the FSM process
    await state.clear()