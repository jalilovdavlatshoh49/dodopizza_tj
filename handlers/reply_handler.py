from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from functions.all_func import get_category_keyboard, get_cart_items, get_order_history, get_user_info
from aiogram.types import InputMediaPhoto
from database.db import SessionLocal
reply_router = Router()


# Handle "–ú–µ–Ω—é" button to show category keyboard
@reply_router.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ")
async def menu_handler(message: types.Message):
    keyboard = await get_category_keyboard()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)






# Handle "–§–∞—Ä–º–æ–∏—à–æ—Ç" button to show past orders
@reply_router.message(F.text == "–§–∞—Ä–º–æ–∏—à–æ—Ç")
async def reply_orders_handler(message: types.Message):
    user_id = message.from_user.id

    # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ç–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ
    orders = await get_order_history(user_id)
    
    if not orders:
        await message.answer("–®—É–º–æ “≥–æ–ª–æ —Ñ–∞—Ä–º–æ–∏—à –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    for order in orders:
        order_text = f"**“≤–æ–ª–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à:** {order['status']}\n\n"
        for item in order['items']:
            order_text += (
                f"üì¶ **–ù–æ–º:** {item['name']}\n"
                f"üî¢ **–ú–∏“õ–¥–æ—Ä:** {item['quantity']}\n"
                f"üíµ **–ù–∞—Ä—Ö:** {item['price']} —Å–æ–º–æ–Ω”£\n"
                f"üí∞ **–ù–∞—Ä—Ö–∏ —É–º—É–º”£:** {item['total_price']} —Å–æ–º–æ–Ω”£\n\n"
            )
            if item['image_url']:
                await message.answer_photo(photo=item['image_url'], caption=order_text)
            else:
                await message.answer(order_text)
        
        order_text = f"üí≥ **–ù–∞—Ä—Ö–∏ —É–º—É–º–∏–∏ —Ñ–∞—Ä–º–æ–∏—à:** {order['total_order_price']} —Å–æ–º–æ–Ω”£\n"
    await message.answer(info_text)



# –§—É–Ω–∫—Å–∏—è–∏ –∫–æ—Ä –±–æ "‚ÑπÔ∏è –ú–∞—ä–ª—É–º–æ—Ç“≥–æ–∏ —à–∞—Ö—Å–∏–∏ –º–∞–Ω"
@reply_router.message(F.text == "–ú–∞—ä–ª—É–º–æ—Ç“≥–æ–∏ —à–∞—Ö—Å–∏–∏ –º–∞–Ω")
async def my_info_handler(message: types.Message):
    session = SessionLocal()
    # –î–∞—Ä—ë—Ñ—Ç–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –∫–æ—Ä–±–∞—Ä
    user_info = await get_user_info(user_id=message.from_user.id)

    if not user_info:
        # –ê–≥–∞—Ä –º–∞—ä–ª—É–º–æ—Ç –≤—É“∑—É–¥ –Ω–∞–¥–æ—à—Ç–∞ –±–æ—à–∞–¥
        await message.answer("–ú–∞—ä–ª—É–º–æ—Ç–∏ —à–∞—Ö—Å–∏–∏ —à—É–º–æ —ë—Ñ—Ç –Ω–∞—à—É–¥. –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Ñ–∞—Ä–º–æ–∏—à –¥–∏“≥–µ–¥.")
        return

    # –¢–∞—à–∫–∏–ª–∏ –º–∞—Ç–Ω–∏ “∑–∞–≤–æ–± –±–æ –º–∞—ä–ª—É–º–æ—Ç“≥–æ
    info_text = (
        f"–ù–æ–º: {user_info['name']}\n"
        f"–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
        f"–ê–¥—Ä–µ—Å: {user_info['address']}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞“≥–æ: {user_info['latitude']}, {user_info['longitude']}\n\n"
        "–ë–∞—Ä–æ–∏ —Ç–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç“≥–æ, —Ç—É–≥–º–∞–∏ –∑–µ—Ä—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥."
    )

    # –≠“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ —Ç—É–≥–º–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    change_button = InlineKeyboardButton(
        text="–¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç“≥–æ", callback_data="change_user_info"
    )
    keyboard.add(change_button)

    # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await message.answer(info_text, reply_markup=keyboard)


@reply_router.callback_query(lambda c: c.data == "continue_shopping")
async def continue_shopping_handler(callback_query: types.CallbackQuery):
    keyboard = await get_category_keyboard()
    await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)