from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery 
from aiogram.filters import Command
from sqlalchemy.future import select
from database.db import SessionLocal, Cart, CartItem
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from sqlalchemy.orm import joinedload
from database.tables import *
sabad_router = Router()







async def get_keyboard(cart_item: CartItem):
    """–°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –¥–∏–Ω–∞–º–∏–∫”£ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç."""
    quantity = cart_item.quantity
    price = await cart_item.get_price()  # Get the price using the async method
    total_price = price * quantity  # Calculate total price
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="-", callback_data=f"decrease_{cart_item.product_type}_{cart_item.product_id}"),
            InlineKeyboardButton(text=f"{quantity} –¥–æ–Ω–∞", callback_data="noop"),
            InlineKeyboardButton(text="+", callback_data=f"increase_{cart_item.product_type}_{cart_item.product_id}")
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–∞—Ä–∑–∏–Ω–∞ ({total_price} —Å–æ–º–æ–Ω”£)",
                callback_data="view_cart"
            )
        ]
    ])
    return keyboard


@sabad_router.callback_query(lambda call: call.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    async with SessionLocal() as session:
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            cart = Cart(user_id=user_id)
            session.add(cart)
            await session.flush()

        # –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_model = globals().get(category.capitalize())
        if not product_model:
            await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
        result = await session.execute(select(product_model).filter(product_model.id == product_id))
        product = result.scalars().first()
        if not product:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        # –ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç –±–∞ —Å–∞–±–∞–¥
        await cart.add_item(session, category, product_id)

        # –≠“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –Ω–∞–≤
        result = await session.execute(
            select(CartItem).where(
                CartItem.cart_id == cart.id,
                CartItem.product_type == category,
                CartItem.product_id == product_id
            )
        )
        cart_item = result.scalars().first()
        if cart_item:
            keyboard = await get_keyboard(cart_item)
    
            # –¢–∞“ì–∏—Ä –¥–æ–¥–∞–Ω–∏ reply_markup
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await call.answer("–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç –±–∞ —Å–∞–±–∞–¥ –Ω–æ–º—É–≤–∞—Ñ—Ñ–∞“õ –±—É–¥.", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("increase_"))
async def increase_quantity(call: types.CallbackQuery):
    async with SessionLocal() as session:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–∞
        user_id = call.from_user.id
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        await cart.add_item(session, category, product_id, quantity=1)
        await session.commit()

        # “∂—É—Å—Ç—É“∑”Ø–∏ cart_item –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω”£
        async with session.begin():
            result = await session.execute(
            select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
        )
            cart_item = result.scalars().first()  # –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ first –±–∞ “∑–æ–∏ next

        if cart_item:
            keyboard = await get_keyboard(cart_item)
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç—à—É–¥–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("decrease_"))
async def decrease_quantity(call: types.CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    data = call.data.split("_")
    category, product_id = data[1], int(data[2])

    async with SessionLocal() as session:
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        result = await session.execute(
            select(CartItem).filter(
                CartItem.cart_id == cart.id,
                CartItem.product_type == category,
                CartItem.product_id == product_id
            )
        )
        cart_item = result.scalars().first()
        if not cart_item:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç!", show_alert=True)
            return

        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            await session.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await call.message.edit_reply_markup(reply_markup=await get_keyboard(cart_item))
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            session.delete(cart_item)
            await session.commit()

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–•–∞—Ä–∏–¥"
            await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–•–∞—Ä–∏–¥", callback_data=f"buy_{category}_{product_id}")
                ]
            ]))

 
# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Å–∞–±–∞–¥
async def get_cart_items(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Cart)
            .filter(Cart.user_id == user_id, Cart.status == OrderStatus.PENDING)
            .options(joinedload(Cart.items))  # –ü–µ—à–∞–∫”£ –±–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º—É–Ω–æ—Å–∏–±–∞—Ç“≥–æ
        )
        cart = result.scalars().first()
        return cart

# –•–∞–Ω–¥–ª–µ—Ä –±–∞—Ä–æ–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /cart
@sabad_router.message(Command("cart"))
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart = await get_cart_items(user_id)

    if not cart or not cart.items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ü–µ—à—Å–∞“≥–∏—Ñ–∞ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ —Å–∞–±–∞–¥
    current_index = 0
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())

    if not product_model:
        await message.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    async with SessionLocal() as session:
        result = await session.execute(select(product_model).filter(product_model.id == item.product_id))
        product = result.scalars().first()

        if not product:
            await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return

        # –ú–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç
        name = product.name
        description = product.description
        price = product.price
        quantity = item.quantity
        total_price = price * quantity

        # –°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="‚ùå", callback_data=f"sabad:remove_{item.product_type}_{item.product_id}"),
            InlineKeyboardButton(text="‚ûñ", callback_data=f"sabad:decrease_{item.product_type}_{item.product_id}"),
            InlineKeyboardButton(text=f"{quantity}", callback_data="noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"sabad:increase_{item.product_type}_{item.product_id}"),
        )
        keyboard.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"sabad:prev_{current_index}"),
            InlineKeyboardButton(
                text=f"{current_index + 1}/{len(cart.items)}", callback_data="noop"
            ),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"sabad:next_{current_index}"),
        )
        keyboard.row(
            InlineKeyboardButton(text=f"üõí –ê—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –Ω–∞ {await cart.get_total_price(session)} —Å–æ–º–æ–Ω”£", callback_data="checkout"),
        )
        keyboard.row(
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping"),
        )

        # –ò—Ä—Å–æ–ª–∏ –ø–∞—ë–º
        photo = product.image_url
        text = (
            f"{name}\n\n"
            f"{description}\n\n"
            f"–ù–∞—Ä—Ö: {price} x {quantity} = {total_price} —Å–æ–º–æ–Ω”£"
        )
        await message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())

@sabad_router.callback_query(lambda c: c.data.startswith("sabad:"))
async def handle_cart_callbacks(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart = await get_cart_items(user_id)

    if not cart or not cart.items:
        await callback_query.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.", show_alert=True)
        return

    data = callback_query.data.split(":")[1]
    parts = data.split("_")
    action = parts[0]

    if action in ["prev", "next"]:
        current_index = int(parts[1])
    else:
        product_type = parts[1]
        product_id = int(parts[2])

        # “∂—É—Å—Ç—É“∑”Ø–∏ –º–∞“≥—Å—É–ª–æ—Ç
        item = None
        for i in cart.items:
            if i.product_type == product_type and i.product_id == product_id:
                item = i
                break
        if not item:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
            return
        current_index = cart.items.index(item)

    # –ê–º–∞–ª–∏—ë—Ç –¥–∞—Ä –∞—Å–æ—Å–∏ `action`
    if action == "increase":
        cart.items[current_index].quantity += 1
    elif action == "decrease" and cart.items[current_index].quantity > 1:
        cart.items[current_index].quantity -= 1
    elif action == "remove":
        async with SessionLocal() as session:
            await cart.remove_item(session, product_type, product_id)
        await callback_query.message.delete()
        await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –∞–∑ —Å–∞–±–∞–¥ —Ö–æ—Ä–∏“∑ —à—É–¥.", show_alert=True)
        return
    elif action == "prev":
        current_index = (current_index - 1) % len(cart.items)
    elif action == "next":
        current_index = (current_index + 1) % len(cart.items)

    # –ú–∞“≥—Å—É–ª–æ—Ç–∏ “∑–æ—Ä”£
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())
    if not product_model:
        await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    async with SessionLocal() as session:
        result = await session.execute(select(product_model).filter(product_model.id == item.product_id))
        product = result.scalars().first()
        if not product:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
            return

    # –ù–∞–≤—Å–æ–∑–∏–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç
    quantity = item.quantity
    total_price = product.price * quantity
    name = product.name
    description = product.description

    # –°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –Ω–∞–≤
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚ùå", callback_data=f"sabad:remove_{item.product_type}_{item.product_id}"),
        InlineKeyboardButton(text="‚ûñ", callback_data=f"sabad:decrease_{item.product_type}_{item.product_id}"),
        InlineKeyboardButton(text=f"{quantity}", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data=f"sabad:increase_{item.product_type}_{item.product_id}"),
    )
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"sabad:prev_{current_index}"),
        InlineKeyboardButton(
            text=f"{current_index + 1}/{len(cart.items)}", callback_data="noop"
        ),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"sabad:next_{current_index}"),
    )
    keyboard.row(
        InlineKeyboardButton(text=f"üõí –ê—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –Ω–∞ {await cart.get_total_price(session)} —Å–æ–º–æ–Ω”£", callback_data="checkout"),
    )
    keyboard.row(
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping"),
    )

    # –ù–∞–≤—Å–æ–∑–∏–∏ –ø–∞—ë–º
    new_caption = (
        f"{name}\n\n"
        f"{description}\n\n"
        f"–ù–∞—Ä—Ö: {product.price} x {quantity} = {total_price} —Å–æ–º–æ–Ω”£"
    )

    if callback_query.message.caption != new_caption:
        await callback_query.message.edit_caption(caption=new_caption, reply_markup=keyboard.as_markup())

    # –ö–æ–º–º–∏—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞“ì–∏—Ä–æ—Ç
    async with SessionLocal() as session:
        await session.commit()
