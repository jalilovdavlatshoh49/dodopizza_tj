from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery 
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto
from sqlalchemy.future import select
from database.db import SessionLocal, Cart, CartItem
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from sqlalchemy.orm import joinedload
from database.tables import *

sabad_router = Router()



async def get_keyboard(cart_item: CartItem):
    session = SessionLocal()
    """–°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –¥–∏–Ω–∞–º–∏–∫”£ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç."""
    quantity = cart_item.quantity
    price = await cart_item.get_price(session)  # Get the price using the async method
    total_price = price * quantity  # Calculate total price
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="-", callback_data=f"decrease_{cart_item.product_type}_{cart_item.product_id}"),
            InlineKeyboardButton(text=f"{quantity} –¥–æ–Ω–∞", callback_data="noop"),
            InlineKeyboardButton(text="+", callback_data=f"increase_{cart_item.product_type}_{cart_item.product_id}")
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–∞—Ä–∑–∏–Ω–∞ ({total_price} —Å–æ–º–æ–Ω”£)",
                callback_data="view_cart"
            )
        ]
    ])
    return keyboard


@sabad_router.callback_query(lambda call: call.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    async with SessionLocal() as session:
        try:
            async with session.begin():
                # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç
                data = call.data.split("_")
                category, product_id = data[1], int(data[2])
                user_id = call.from_user.id

                # –Å—Ñ—Ç–∞–Ω–∏ —Å–∞–±–∞–¥ —ë —ç“∑–æ–¥ –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–±–∞–¥–∏ –Ω–∞–≤
                result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
                cart = result.scalars().first()
                if not cart:
                    cart = Cart(user_id=user_id)
                    session.add(cart)
                    await session.flush()

                # –°–∞–Ω“∑–∏—à–∏ –¥—É—Ä—É—Å—Ç–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –º–∞“≥—Å—É–ª–æ—Ç
                product_model = globals().get(category.capitalize())
                if not product_model:
                    await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
                    return

                # –Å—Ñ—Ç–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç
                result = await session.execute(
                    select(product_model).filter(product_model.id == product_id)
                )
                product = result.scalars().first()
                if not product:
                    await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
                    return

                # –ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç –±–∞ —Å–∞–±–∞–¥
                await cart.add_item(session, category, product_id)

                # –ù–∞–≤—Å–æ–∑–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                # –ù–∞–≤—Å–æ–∑–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                result = await session.execute(
    select(CartItem).where(
        CartItem.cart_id == cart.id,
        CartItem.product_type == category,
        CartItem.product_id == product_id
    )
)
                cart_item = result.scalars().first()
                if cart_item:
                    # Pass the session explicitly to get the correct price
                    keyboard = await get_keyboard(cart_item)  
                    await call.message.edit_reply_markup(reply_markup=keyboard)
                else:
                    await call.answer("–ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç –±–∞ —Å–∞–±–∞–¥ –Ω–æ–º—É–≤–∞—Ñ—Ñ–∞“õ –±—É–¥.", show_alert=True)
        except Exception as e:
            await call.answer("–•–∞—Ç–æ–≥”£ —Ä—É—Ö –¥–æ–¥!", show_alert=True)
            print(f"Error in buy_product: {e}")


@sabad_router.callback_query(lambda call: call.data.startswith("increase_"))
async def increase_quantity(call: types.CallbackQuery):
    async with SessionLocal() as session:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–∞
        user_id = call.from_user.id
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        await cart.add_item(session, category, product_id, quantity=1)
        await session.commit()

        # “∂—É—Å—Ç—É“∑”Ø–∏ cart_item –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω”£
        async with session.begin():
            result = await session.execute(
            select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
        )
            cart_item = result.scalars().first()  # –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ first –±–∞ “∑–æ–∏ next

        if cart_item:
            keyboard = await get_keyboard(cart_item)
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç—à—É–¥–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("decrease_"))
async def decrease_quantity(call: types.CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    data = call.data.split("_")
    category, product_id = data[1], int(data[2])

    async with SessionLocal() as session:
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        result = await session.execute(
            select(CartItem).filter(
                CartItem.cart_id == cart.id,
                CartItem.product_type == category,
                CartItem.product_id == product_id
            )
        )
        cart_item = result.scalars().first()
        if not cart_item:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç!", show_alert=True)
            return

        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cart_item.quantity >= 1:
            cart_item.quantity -= 1
            await session.commit()
            await session.close()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await call.message.edit_reply_markup(reply_markup=await get_keyboard(cart_item))
        if cart_item.quantity < 1:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            session.delete(cart_item)
            await session.commit()

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–•–∞—Ä–∏–¥"
            await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–•–∞—Ä–∏–¥", callback_data=f"buy_{category}_{product_id}")
                ]
            ]))
    await session.close()

 
# –§—É–Ω–∫—Å–∏—è“≥–æ –±–∞—Ä–æ–∏ –∫–æ—Ä –±–æ —Å–∞–±–∞–¥
async def get_user_cart(user_id: int):
    """–°–∞–±–∞–¥–∏ –∫–æ—Ä–±–∞—Ä—Ä–æ –±–æ –º–∞–≤–æ–¥“≥–æ—è—à –º–µ–≥–∏—Ä–∞–¥."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(Cart)
            .filter(Cart.user_id == user_id, Cart.status == OrderStatus.PENDING)
            .options(joinedload(Cart.items))
        )
        return result.scalars().first()


async def get_product_by_id(product_model, product_id):
    """–ú–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–æ ID –∞–∑ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ –º–µ–≥–∏—Ä–∞–¥."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(product_model).filter(product_model.id == product_id)
        )
        return result.scalars().first()


def create_cart_keyboard(cart, current_index, item, total_price):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ —Å–∞–±–∞–¥ –º–µ—Å–æ–∑–∞–¥."""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="‚ùå", callback_data=f"sabad:remove_{item.product_type}_{item.product_id}"
        ),
        InlineKeyboardButton(
            text="‚ûñ", callback_data=f"sabad:decrease_{item.product_type}_{item.product_id}"
        ),
        InlineKeyboardButton(text=f"{item.quantity}", callback_data="noop"),
        InlineKeyboardButton(
            text="‚ûï", callback_data=f"sabad:increase_{item.product_type}_{item.product_id}"
        ),
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=f"sabad:prev_{current_index}"
        ),
        InlineKeyboardButton(
            text=f"{current_index + 1}/{len(cart.items) - 1}", callback_data="noop"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è", callback_data=f"sabad:next_{current_index}"
        ),
    )
    keyboard.row(
        InlineKeyboardButton(
            text=f"üõí –ê—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –Ω–∞ {total_price} —Å–æ–º–æ–Ω”£", callback_data="checkout"
        ),
    )
    keyboard.row(
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping"),
    )
    return keyboard


async def send_cart_item_details(message, product, item, current_index, cart):
    """–ú–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞ –∫–æ—Ä–±–∞—Ä –º–µ—Ñ–∏—Ä–∏—Å—Ç–∞–¥."""
    name = product.name
    description = product.description
    price = product.price
    quantity = item.quantity
    total_price = price * quantity

    keyboard = create_cart_keyboard(cart, current_index, item, total_price)

    text = (
        f"{name}\n\n"
        f"{description}\n\n"
        f"–ù–∞—Ä—Ö: {price} x {quantity} = {total_price} —Å–æ–º–æ–Ω”£"
    )
    await message.answer_photo(
        photo=product.image_url, caption=text, reply_markup=keyboard.as_markup()
    )


async def edit_send_cart_item_details(callback_query, product, item, current_index, cart):
    """–ú–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–∞ –∫–æ—Ä–±–∞—Ä –º–µ—Ñ–∏—Ä–∏—Å—Ç–∞–¥."""
    name = product.name
    description = product.description
    price = product.price
    quantity = item.quantity
    total_price = price * quantity

    # –¢–∞—à–∫–∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = create_cart_keyboard(cart, current_index, item, total_price)

    # –ú–∞—Ç–Ω–∏ –∏—Ç—Ç–∏–ª–æ–æ—Ç
    text = (
        f"{name}\n\n"
        f"{description}\n\n"
        f"–ù–∞—Ä—Ö: {price} x {quantity} = {total_price} —Å–æ–º–æ–Ω”£"
    )

    # –¢–∞“ì–π–∏—Ä–∏ –∞–∫—Å –≤–∞ –º–∞—Ç–Ω –¥–∞—Ä –ø–∞—ë–º
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=product.image_url,
            caption=text
        ),
        reply_markup=keyboard.as_markup()
    )
    # “∂–∞–≤–æ–±–∏ callback –±–∞—Ä–æ–∏ –ø–µ—à–≥–∏—Ä–∏–∏ —Ö–∞—Ç–æ
    await callback_query.answer()



# –•–∞–Ω–¥–ª–µ—Ä“≥–æ
@sabad_router.message(Command("cart"))
async def show_cart(message: types.Message):
    """–ù–∞–º–æ–∏—à–∏ —Å–∞–±–∞–¥ –±–∞ –∫–æ—Ä–±–∞—Ä."""
    user_id = message.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    current_index = 0
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())

    if not product_model:
        await message.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    await send_cart_item_details(message, product, item, current_index, cart)


# “≤–æ–ª–∞—Ç–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ "–°–∞–±–∞–¥"
@sabad_router.message(F.text == "–°–∞–±–∞–¥")
async def reply_show_cart(message: types.Message):
    """–ù–∞–º–æ–∏—à–∏ —Å–∞–±–∞–¥ –±–∞ –∫–æ—Ä–±–∞—Ä."""
    user_id = message.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    current_index = 0
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())

    if not product_model:
        await message.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    await send_cart_item_details(message, product, item, current_index, cart)


# “≤–æ–ª–∞—Ç–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ "–°–∞–±–∞–¥"
@sabad_router.callback_query(lambda c: c.data == "view_cart")
async def view_cart_show_cart(message: types.Message):
    """–ù–∞–º–æ–∏—à–∏ —Å–∞–±–∞–¥ –±–∞ –∫–æ—Ä–±–∞—Ä."""
    user_id = message.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    current_index = 0
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())

    if not product_model:
        await message.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        return

    await send_cart_item_details(message, product, item, current_index, cart)



@sabad_router.callback_query(lambda c: c.data.startswith('sabad:increase_'))
async def increase_quantity(callback_query: CallbackQuery):
    """–ú–∏“õ–¥–æ—Ä–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –∑–∏—ë–¥ –º–µ–∫—É–Ω–∞–¥."""
    _, product_type, product_id = callback_query.data.split("_")
    product_id = int(product_id)
    user_id = callback_query.from_user.id

    async with SessionLocal() as session:
        # Retrieve the cart
        cart_result = await session.execute(select(Cart).where(Cart.user_id == user_id))
        cart = cart_result.scalars().first()

        if not cart:
            await callback_query.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        # Retrieve the cart item
        item_result = await session.execute(
            select(CartItem).where(
                CartItem.cart_id == cart.id,
                CartItem.product_type == product_type,
                CartItem.product_id == product_id
            )
        )
        item = item_result.scalars().first()

        if not item:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç!", show_alert=True)
            return

        # Increase quantity
        item.quantity += 1
        await session.commit()

        
        cart = await get_user_cart(user_id)

        if not cart or not cart.items:
            await callback_query.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
            return

        current_index = 0
        item = cart.items[current_index]
        product_model = globals().get(item.product_type.capitalize())

        if not product_model:
            await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return

        product = await get_product_by_id(product_model, item.product_id)
        if not product:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return

        await edit_send_cart_item_details(callback_query, product, item, current_index, cart)
    



@sabad_router.callback_query(lambda c: c.data.startswith('sabad:decrease_'))
async def decrease_quantity(callback_query: CallbackQuery):
    _, product_type, product_id = callback_query.data.split("_")
    product_id = int(product_id)
    user_id = callback_query.from_user.id

    async with SessionLocal() as session:
        # Retrieve the user's cart
        cart_result = await session.execute(select(Cart).where(Cart.user_id == user_id))
        cart = cart_result.scalars().first()

        if not cart:
            await callback_query.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        # Retrieve the specific cart item
        item_result = await session.execute(
            select(CartItem).where(
                CartItem.cart_id == cart.id,
                CartItem.product_type == product_type,
                CartItem.product_id == product_id
            )
        )
        item = item_result.scalars().first()

        if not item:
            await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç!", show_alert=True)
            return

        # Decrease the quantity or remove the item
        if item.quantity > 1:
            item.quantity -= 1
            await session.commit()
            
            cart = await get_user_cart(user_id)

            if not cart or not cart.items:
                await callback_query.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
                return

            current_index = 0
            item = cart.items[current_index]
            product_model = globals().get(item.product_type.capitalize())

            if not product_model:
                await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
                return

            product = await get_product_by_id(product_model, item.product_id)
            if not product:
                await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
                return

            await edit_send_cart_item_details(callback_query, product, item, current_index, cart)

        else:
            await session.delete(item)
            await session.commit()
            message = "–ú–∞“≥—Å—É–ª–æ—Ç –∞–∑ —Å–∞–±–∞–¥ —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞ —à—É–¥!"
            # –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º
            await callback_query.message.delete()
            cart = await get_user_cart(user_id)

            if not cart or not cart.items:
                await callback_query.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
                return

            current_index = 0
            item = cart.items[current_index]
            product_model = globals().get(item.product_type.capitalize())

            if not product_model:
                await callback_query.message.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
                return

            product = await get_product_by_id(product_model, item.product_id)
            if not product:
                await callback_query.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
                return




@sabad_router.callback_query(lambda c: c.data and c.data.startswith("sabad:prev_"))
async def show_previous_item(callback_query: types.CallbackQuery):
    """–ù–∞–º–æ–∏—à–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ “õ–∞–±–ª”£ –∞–∑ —Å–∞–±–∞–¥."""
    user_id = callback_query.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await callback_query.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ò“∑—Ä–æ–∏ current_index –∞–∑ callback_data
    data = callback_query.data.split("_")
    try:
        current_index = int(data[1])
    except (IndexError, ValueError):
        await callback_query.answer("–•–∞—Ç–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä“≥–æ–∏ –¥–æ—Ö–∏–ª”£.", show_alert=True)
        return

    # “≤–∏—Å–æ–±–∏ –∏–Ω–¥–µ–∫—Å–∏ –Ω–∞–≤
    new_index = (current_index - 1) % len(cart.items)
    item = cart.items[new_index]

    # –Å—Ñ—Ç–∞–Ω–∏ –º–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç
    product_model = globals().get(item.product_type.capitalize())
    if not product_model:
        await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    # –¢–∞“ì–π–∏—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –ø–∞—ë–º
    await edit_send_cart_item_details(callback_query, product, item, new_index, cart)
            
        
        



@sabad_router.callback_query(lambda c: c.data and c.data.startswith("sabad:next_"))
async def show_next_item(callback_query: types.CallbackQuery):
    """–ù–∞–º–æ–∏—à–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –æ—è–Ω–¥–∞ –∞–∑ —Å–∞–±–∞–¥."""
    user_id = callback_query.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await callback_query.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ò“∑—Ä–æ–∏ current_index –∞–∑ callback_data
    data = callback_query.data.split("_")
    try:
        current_index = int(data[1])
    except (IndexError, ValueError):
        await callback_query.answer("–•–∞—Ç–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä“≥–æ–∏ –¥–æ—Ö–∏–ª”£.", show_alert=True)
        return

    # “≤–∏—Å–æ–±–∏ –∏–Ω–¥–µ–∫—Å–∏ –Ω–∞–≤
    new_index = (current_index + 1) % len(cart.items)
    item = cart.items[new_index]

    # –Å—Ñ—Ç–∞–Ω–∏ –º–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç
    product_model = globals().get(item.product_type.capitalize())
    if not product_model:
        await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    # –¢–∞“ì–π–∏—Ä–∏ –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –ø–∞—ë–º
    await edit_send_cart_item_details(callback_query, product, item, new_index, cart)


@sabad_router.callback_query(lambda c: c.data and c.data.startswith("sabad:remove_"))
async def remove_item_from_cart(callback_query: types.CallbackQuery):
    """–•–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç –∞–∑ —Å–∞–±–∞–¥."""
    user_id = callback_query.from_user.id
    cart = await get_user_cart(user_id)

    if not cart or not cart.items:
        await callback_query.message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ò“∑—Ä–æ–∏ –º–∞—ä–ª—É–º–æ—Ç –∞–∑ callback_data
    data = callback_query.data.split("_")
    try:
        product_type = data[1]
        product_id = int(data[2])
    except (IndexError, ValueError):
        await callback_query.answer("–•–∞—Ç–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä“≥–æ–∏ –¥–æ—Ö–∏–ª”£.", show_alert=True)
        return

    # –•–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç
    async with SessionLocal() as session:
        await cart.remove_item(session, product_type, product_id)
        await session.commit()

    # –ê–∑ –Ω–∞–≤ —Å–∞–Ω“∑–∏–¥–∞–Ω–∏ —Å–∞–±–∞–¥
    cart = await get_user_cart(user_id)
    if not cart or not cart.items:
        await callback_query.message.edit_text("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ù–∞–º–æ–∏—à–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –∞–≤–≤–∞–ª–∏ –Ω–∞–≤—à—É–¥–∞
    item = cart.items[0]
    product_model = globals().get(item.product_type.capitalize())
    if not product_model:
        await callback_query.answer("–ú–æ–¥–µ–ª–∏ –º–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    product = await get_product_by_id(product_model, item.product_id)
    if not product:
        await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
        return

    await edit_send_cart_item_details(callback_query, product, item, 0, cart)
    await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –∞–∑ —Å–∞–±–∞–¥ —Ö–æ—Ä–∏“∑ —à—É–¥.")