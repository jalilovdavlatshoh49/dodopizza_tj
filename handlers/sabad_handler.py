from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery 
from aiogram.filters import Command
from sqlalchemy.future import select
from database.db import SessionLocal, Cart, CartItem
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from sqlalchemy.orm import joinedload
from database.tables import *
sabad_router = Router()







async def get_keyboard(cart_item: CartItem):
    """–°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –¥–∏–Ω–∞–º–∏–∫”£ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç."""
    quantity = cart_item.quantity
    price = await cart_item.get_price()  # Get the price using the async method
    total_price = price * quantity  # Calculate total price
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="-", callback_data=f"decrease_{cart_item.product_type}_{cart_item.product_id}"),
            InlineKeyboardButton(text=f"{quantity} –¥–æ–Ω–∞", callback_data="noop"),
            InlineKeyboardButton(text="+", callback_data=f"increase_{cart_item.product_type}_{cart_item.product_id}")
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–∞—Ä–∑–∏–Ω–∞ ({total_price} —Å–æ–º–æ–Ω”£)",
                callback_data="view_cart"
            )
        ]
    ])
    return keyboard


@sabad_router.callback_query(lambda call: call.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    async with SessionLocal() as session:
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            cart = Cart(user_id=user_id)
            session.add(cart)
            await session.flush()

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_model = globals().get(category.capitalize())
        if not product_model:
            await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        result = await session.execute(select(product_model).filter(product_model.id == product_id))
        product = result.scalars().first()
        if not product:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        result = await session.execute(
            select(CartItem).where(
                CartItem.cart_id == cart.id, 
                CartItem.product_type == category, 
                CartItem.product_id == product_id
            )
        )
        cart_item = result.scalars().first()

        if cart_item:
            # –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await get_keyboard(cart_item)
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await call.answer("–ò–Ω –º–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç. –õ—É—Ç—Ñ–∞–Ω –æ–Ω—Ä–æ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("increase_"))
async def increase_quantity(call: types.CallbackQuery):
    async with SessionLocal() as session:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–∞
        user_id = call.from_user.id
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        await cart.add_item(session, category, product_id, quantity=1)
        await session.commit()

        # “∂—É—Å—Ç—É“∑”Ø–∏ cart_item –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω”£
        async with session.begin():
            result = await session.execute(
            select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
        )
            cart_item = result.scalars().first()  # –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ first –±–∞ “∑–æ–∏ next

        if cart_item:
            keyboard = await get_keyboard(cart_item)
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç—à—É–¥–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("decrease_"))
async def decrease_quantity(call: types.CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    data = call.data.split("_")
    category, product_id = data[1], int(data[2])

    async with SessionLocal() as session:
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        result = await session.execute(
            select(CartItem).filter(
                CartItem.cart_id == cart.id,
                CartItem.product_type == category,
                CartItem.product_id == product_id
            )
        )
        cart_item = result.scalars().first()
        if not cart_item:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä —Å–∞–±–∞–¥ –Ω–µ—Å—Ç!", show_alert=True)
            return

        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            await session.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            await call.message.edit_reply_markup(reply_markup=await get_keyboard(cart_item))
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            session.delete(cart_item)
            await session.commit()

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–•–∞—Ä–∏–¥"
            await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–•–∞—Ä–∏–¥", callback_data=f"buy_{category}_{product_id}")
                ]
            ]))

 

# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Å–∞–±–∞–¥
async def get_cart_items(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Cart)
            .filter(Cart.user_id == user_id, Cart.status == OrderStatus.PENDING)
            .options(joinedload(Cart.items))  # –ü–µ—à–∞–∫”£ –±–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º—É–Ω–æ—Å–∏–±–∞—Ç“≥–æ
        )
        cart = result.scalars().first()
        return cart

# –•–∞–Ω–¥–ª–µ—Ä –±–∞—Ä–æ–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /cart
@sabad_router.message(Command("cart"))
async def show_cart(message: types.Message):
    session = SessionLocal()
    user_id = message.from_user.id
    cart = await get_cart_items(user_id)
    if not cart or not cart.items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # –ü–µ—à—Å–∞“≥–∏—Ñ–∞ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ —Å–∞–±–∞–¥
    current_index = 0
    item = cart.items[current_index]
    product_model = globals().get(item.product_type.capitalize())
    result = await session.execute(select(product_model).filter(product_model.id == item.product_id))
    product = result.scalars().first()

    # –ú–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç
    name = product.name
    description = product.description
    price = product.price
    quantity = item.quantity
    total_price = price * quantity

    # –°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω", callback_data=f"remove_{item.id}"),
        InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{item.id}"),
        InlineKeyboardButton(text=f"{quantity}", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{item.id}"),
    )
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{current_index}"),
        InlineKeyboardButton(
            text=f"{current_index + 1}/{len(cart.items)}", callback_data="noop"
        ),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{current_index}"),
    )
    keyboard.row(
        InlineKeyboardButton(text=f"üõí –ê—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –Ω–∞ {await cart.get_total_price(session)} —Å–æ–º–æ–Ω”£", callback_data="checkout"),
    )
    keyboard.row(
        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping"),
    )

    # –ò—Ä—Å–æ–ª–∏ –ø–∞—ë–º
    photo = product.image_url  # URL —Ä–∞—Å–º–∏ –º–∞“≥—Å—É–ª–æ—Ç
    text = (
        f"<b>{name}</b>\n"
        f"{description}\n"
        f"–ù–∞—Ä—Ö: {price} x {quantity} = {total_price} —Å–æ–º–æ–Ω”£"
    )
    await message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())

# –•–∞–Ω–¥–ª–µ—Ä –±–∞—Ä–æ–∏ callback-–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@sabad_router.callback_query()
async def handle_callback(call: types.CallbackQuery):
    session = SessionLocal()
    data = call.data
    if data.startswith("remove_"):
        item_id = int(data.split("_")[1])
        # –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç
        await remove_item_from_cart(item_id)
        await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.")
        await show_cart(call.message, session)
    elif data.startswith("decrease_"):
        item_id = int(data.split("_")[1])
        # –ö–∞–º –∫–∞—Ä–¥–∞–Ω–∏ –º–∏“õ–¥–æ—Ä
        await decrease_item_quantity(item_id)
        await call.answer("–ú–∏“õ–¥–æ—Ä –∫–∞–º —à—É–¥.")
        await show_cart(call.message, session)
    elif data.startswith("increase_"):
        item_id = int(data.split("_")[1])
        # –ê—Ñ–∑—É–¥–∞–Ω–∏ –º–∏“õ–¥–æ—Ä
        await increase_item_quantity(item_id)
        await call.answer("–ú–∏“õ–¥–æ—Ä –∑–∏—ë–¥ —à—É–¥.")
        await show_cart(call.message, session)
    elif data.startswith("prev_") or data.startswith("next_"):
        # –ü–∞–π–º–æ–∏—à –±–∞–π–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç“≥–æ
        current_index = int(data.split("_")[1])
        new_index = (current_index - 1) if data.startswith("prev_") else (current_index + 1)
        await show_cart(call.message, session, new_index)
    elif data == "checkout":
        await call.answer("–®—É–º–æ —Ñ–∞—Ä–º–æ–∏—à–∏ —Ö—É–¥—Ä–æ –∞—Ñ–æ—Ä–º–∏—Ç –∫–∞—Ä–¥–µ–¥!")
    elif data == "continue_shopping":
        await call.answer("–®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ —Ö–∞—Ä–∏–¥–∏ —Ö—É–¥—Ä–æ –∏–¥–æ–º–∞ –¥–∏“≥–µ–¥!")

# –§—É–Ω–∫—Å–∏—è“≥–æ –±–∞—Ä–æ–∏ —Ç–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ —Å–∞–±–∞–¥
async def remove_item_from_cart(item_id: int):
    session = SessionLocal()
    result = await session.execute(select(CartItem).filter(CartItem.id == item_id))
    item = result.scalars().first()
    if item:
        await session.delete(item)
        await session.commit()

async def decrease_item_quantity(item_id: int):
    session = SessionLocal()
    result = await session.execute(select(CartItem).filter(CartItem.id == item_id))
    item = result.scalars().first()
    if item and item.quantity > 1:
        item.quantity -= 1
        await session.commit()

async def increase_item_quantity(item_id: int):
    session = SessionLocal()
    result = await session.execute(select(CartItem).filter(CartItem.id == item_id))
    item = result.scalars().first()
    if item:
        item.quantity += 1
        await session.commit()
