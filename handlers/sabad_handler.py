from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery 
from aiogram.filters import Command
from sqlalchemy.future import select
from database.db import SessionLocal, Cart, CartItem
from database.tables import *
sabad_router = Router()

# Create cart keyboard
async def create_cart_keyboard(cart):
    session = SessionLocal()
    keyboard = []

    for item in cart.items:
        product_model = globals()[item.product_type.capitalize()]
        product = await session.execute(select(product_model).filter_by(id=item.product_id))
        product = product.scalar_one_or_none()

        if product:
            total_price = product.price * item.quantity
            buttons = [
                InlineKeyboardButton(text="‚ûï –ó–∞–º", callback_data=f"increase_{item.product_type}_{item.product_id}"),
                InlineKeyboardButton(text="‚ûñ –ö–∞–º", callback_data=f"decrease_{item.product_type}_{item.product_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Å—Ç", callback_data=f"remove_{item.product_type}_{item.product_id}")
            ]
            keyboard.append(buttons)
            keyboard.append([InlineKeyboardButton(
                text=f"{product.name}: {item.quantity} x {product.price} = {total_price} —Å–æ–º–æ–Ω–∏", callback_data="no_action"
            )])

    keyboard.append([InlineKeyboardButton(text="üõí “≤–∏—Å–æ–±–∏ —Å–∞–±–∞–¥", callback_data="checkout")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
    

# –§—É–Ω–∫—Å–∏—è–∏ —ë—Ä–∏—Ä–∞—Å–æ–Ω –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç“≥–æ –∞–∑ —Å–∞–±–∞–¥
async def get_cart_items(user_id: int):
    session = SessionLocal()
    query = await session.execute(
        select(CartItem, Cart)
        .join(Cart)
        .where(Cart.user_id == user_id)
    )
    items = query.scalars().all()

    result = []
    for item in items:
        product_model = globals()[item.product_type.capitalize()]  # –¢–∞–±–ª–∏—Ü–∞—Ä–æ –º—É–∞–π—è–Ω –º–µ–∫—É–Ω–µ–º
        product = await session.get(product_model, item.product_id)
        if product:
            result.append({
                "id": item.id,
                "name": product.name,
                "price": product.price,
                "image_url": product.image_url,
                "quantity": item.quantity,
            })
    return result


async def show_cart(target, user_id: int):
    session = SessionLocal()
    """
    –°–∞–±–∞–¥—Ä–æ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.

    Args:
        target: –ü–∞—ë–º —ë –æ–±—ä–µ–∫—Ç–∏ callback_query (Message —ë CallbackQuery).
        session: –°–µ—Å—Å–∏—è–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∏ SQLAlchemy.
        user_id: ID-–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞.
    """
    cart_items = await get_cart_items(session, user_id)

    if not cart_items:
        # –ê–≥–∞—Ä —Å–∞–±–∞–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥
        if isinstance(target, CallbackQuery):
            await target.message.edit_text("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        else:
            await target.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    # “≤–∞—Ä —è–∫ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–µ–º
    for item in cart_items:
        # –°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£
        keyboard = InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            InlineKeyboardButton("‚ûï", callback_data=f"sabad:add_{item['id']}"),
            InlineKeyboardButton("‚ûñ", callback_data=f"sabad:remove_{item['id']}"),
            InlineKeyboardButton("‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω", callback_data=f"sabad:delete_{item['id']}")
        )

        # –ù–∞–º—É–¥–∏ –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç
        caption = (
            f"üì¶ <b>{item['name']}</b>\n"
            f"üí∞ –ù–∞—Ä—Ö: {item['price']} —Å–æ–º–æ–Ω”£\n"
            f"üî¢ –ú–∏“õ–¥–æ—Ä: {item['quantity']}\n"
            f"üíµ “∂–∞–º—ä–∏ —É–º—É–º”£: {item['price'] * item['quantity']} —Å–æ–º–æ–Ω”£"
        )

        if isinstance(target, CallbackQuery):
            # –ê–≥–∞—Ä –¥–∞—ä–≤–∞—Ç –∞–∑ callback_query –±–æ—à–∞–¥
            await target.message.edit_caption(
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ê–≥–∞—Ä –¥–∞—ä–≤–∞—Ç –∞–∑ message –±–æ—à–∞–¥
            await target.answer_photo(
                photo=item["image_url"],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )





async def get_keyboard(cart_item: CartItem):
    """–°–æ—Ö—Ç–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –¥–∏–Ω–∞–º–∏–∫”£ –±–∞—Ä–æ–∏ –º–∞“≥—Å—É–ª–æ—Ç."""
    quantity = cart_item.quantity
    price = await cart_item.get_price()  # Get the price using the async method
    total_price = price * quantity  # Calculate total price
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="-", callback_data=f"decrease_{cart_item.product_type}_{cart_item.product_id}"),
            InlineKeyboardButton(text=f"{quantity} –¥–æ–Ω–∞", callback_data="noop"),
            InlineKeyboardButton(text="+", callback_data=f"increase_{cart_item.product_type}_{cart_item.product_id}")
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–∞—Ä–∑–∏–Ω–∞ ({total_price} —Å–æ–º–æ–Ω”£)",
                callback_data="view_cart"
            )
        ]
    ])
    return keyboard


@sabad_router.callback_query(lambda call: call.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    async with SessionLocal() as session:
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])
        user_id = call.from_user.id

        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            cart = Cart(user_id=user_id)
            session.add(cart)
            await session.flush()

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
        product_model = globals().get(category.capitalize())
        if not product_model:
            await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        result = await session.execute(select(product_model).filter(product_model.id == product_id))
        product = result.scalars().first()
        if not product:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        await cart.add_item(session, category, product_id, quantity=1)
        await session.commit()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(
        select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
    )
        cart_item = result.scalars().first()

        if cart_item:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await call.message.edit_reply_markup(reply_markup=get_keyboard(cart_item))
        else:
            await call.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("increase_"))
async def increase_quantity(call: types.CallbackQuery):
    async with SessionLocal() as session:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–∞
        user_id = call.from_user.id
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        await cart.add_item(category, product_id, quantity=1)
        await session.commit()

        # “∂—É—Å—Ç—É“∑”Ø–∏ cart_item –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω”£
        async with session.begin():
            result = await session.execute(
            select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
        )
            cart_item = result.scalars().first()  # –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ first –±–∞ “∑–æ–∏ next

        if cart_item:
            await call.message.edit_reply_markup(reply_markup=get_keyboard(cart_item))
        else:
            await call.answer("–ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç—à—É–¥–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)


@sabad_router.callback_query(lambda call: call.data.startswith("decrease_"))
async def decrease_quantity(call: types.CallbackQuery):
    async with SessionLocal() as session:
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        data = call.data.split("_")
        category, product_id = data[1], int(data[2])

        # –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–∞
        user_id = call.from_user.id
        result = await session.execute(select(Cart).filter(Cart.user_id == user_id))
        cart = result.scalars().first()
        if not cart:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —Ö–æ–ª”£ –∞—Å—Ç!", show_alert=True)
            return

        cart_item = next(item for item in cart.items if item.product_type == category and item.product_id == product_id)
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
        else:
            await cart.remove_item(category, product_id)

        await session.commit()

        async with session.begin():
            result = await session.execute(
            select(CartItem).where(CartItem.product_type == category, CartItem.product_id == product_id)
        )
            cart_items = result.scalars().all()

        if cart_items:
        # –ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –∞–≤–≤–∞–ª–∏–Ω –º—É–≤–æ—Ñ–∏“õ, –∞–≥–∞—Ä —á–∏–∑–∏ –º—É–≤–æ—Ñ–∏“õ —ë—Ñ—Ç–∞ —à–∞–≤–∞–¥
            cart_item = cart_items[0]
            await call.message.edit_reply_markup(reply_markup=get_keyboard(cart_item))
        else:
            await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"–•–∞—Ä–∏–¥ {product.price} —Å–æ–º–æ–Ω”£",
                                         callback_data=f"buy_{category}_{product_id}")
                ]
            ]))



# “≤–µ–Ω–¥–ª–µ—Ä –±–∞—Ä–æ–∏ –∫–æ–º–∞–Ω–¥–∞–∏ /cart
@sabad_router.message(Command("cart"))
async def show_cart(message: types.Message):
    session = SessionLocal()
    user_id = message.from_user.id
    cart_items = await get_cart_items(session, user_id)

    if not cart_items:
        await message.answer("–°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return

    for item in cart_items:
        keyboard = InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            InlineKeyboardButton("‚ûï", callback_data=f"sabad:add_{item['id']}"),
            InlineKeyboardButton("‚ûñ", callback_data=f"sabad:remove_{item['id']}"),
            InlineKeyboardButton("‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω", callback_data=f"sabad:delete_{item['id']}")
        )

        await message.answer_photo(
            photo=item["image_url"],
            caption=(
                f"üì¶ <b>{item['name']}</b>\n"
                f"üí∞ –ù–∞—Ä—Ö: {item['price']} —Å–æ–º–æ–Ω”£\n"
                f"üî¢ –ú–∏“õ–¥–æ—Ä: {item['quantity']}\n"
                f"üíµ “∂–∞–º—ä–∏ —É–º—É–º”£: {item['price'] * item['quantity']} —Å–æ–º–æ–Ω”£"
            ),
            reply_markup=keyboard,
            parse_mode="HTML"
        )

# Callback “≥–µ–Ω–¥–ª–µ—Ä“≥–æ –±–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –º–∏“õ–¥–æ—Ä
@sabad_router.callback_query(lambda c: c.data.startswith("sabad:add_"))
async def add_item(callback_query: CallbackQuery):
    session = SessionLocal()
    item_id = int(callback_query.data.split("_")[1])
    cart_item = await session.get(CartItem, item_id)
    if cart_item:
        cart_item.quantity += 1
        await session.commit()
        await callback_query.answer("–ú–∏“õ–¥–æ—Ä –∑–∏—ë–¥ —à—É–¥!")
        await show_cart(callback_query.message, session)

@sabad_router.callback_query(lambda c: c.data.startswith("sabad:remove_"))
async def remove_item(callback_query: CallbackQuery):
    session = SessionLocal()
    item_id = int(callback_query.data.split("_")[1])
    cart_item = await session.get(CartItem, item_id)
    if cart_item and cart_item.quantity > 1:
        cart_item.quantity -= 1
        await session.commit()
        await callback_query.answer("–ú–∏“õ–¥–æ—Ä –∫–∞–º —à—É–¥!")
        await show_cart(callback_query.message, session)
    else:
        await callback_query.answer("–ú–∏“õ–¥–æ—Ä—Ä–æ –∫–∞–º –∫–∞—Ä–¥–∞–Ω –º—É–º–∫–∏–Ω –Ω–µ—Å—Ç!")

@sabad_router.callback_query(lambda c: c.data.startswith("sabad:delete_"))
async def delete_item(callback_query: CallbackQuery):
    session = SessionLocal()
    item_id = int(callback_query.data.split("_")[1])
    cart_item = await session.get(CartItem, item_id)
    if cart_item:
        await session.delete(cart_item)
        await session.commit()
        await callback_query.answer("–ú–∞“≥—Å—É–ª–æ—Ç –∞–∑ —Å–∞–±–∞–¥ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!")
        await show_cart(callback_query.message, session)