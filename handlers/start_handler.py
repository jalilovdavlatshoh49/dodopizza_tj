from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from functions.all_func import get_category_keyboard
from database.tables import Pizza, Combo, Snacks, Desserts, Drinks, Sauces, Kids_Love, OtherGoods
from database.db import SessionLocal

start_router = Router()


# Handle the start command
@start_router.message(CommandStart())
async def start_handler(message: types.Message):
    keyboard = await get_category_keyboard()
    await message.answer(
        "–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –±–æ—Ç!",
        reply_markup=keyboard
    )



# Callback handler to display products based on category
@start_router.callback_query(lambda c: c.data.startswith("category_"))
async def category_handler(callback_query: types.CallbackQuery):
    category = callback_query.data.split("_")[1]  # Extract category from callback data
    session = SessionLocal()
    # Query products from the database based on category
    model_map = {
        "pizza": Pizza,
        "combo": Combo,
        "snacks": Snacks,
        "desserts": Desserts,
        "drinks": Drinks,
        "sauces": Sauces,
        "kidslove": Kids_Love,
        "othergoods": OtherGoods
    }
    
    model = model_map.get(category)
    if model:
        stmt = select(model)
        results = await session.execute(stmt)
        products = results.scalars().all()
        
        total_products = len(products)  # “≤–∏—Å–æ–±–∏ —Ç–µ—ä–¥–æ–¥–∏ —É–º—É–º–∏–∏ –º–∞“≥—Å—É–ª–æ—Ç
        displayed_products = 0  # –¢–µ—ä–¥–æ–¥–∏ –º–∞“≥—Å—É–ª–æ—Ç“≥–æ–∏ –Ω–∞–º–æ–∏—à—à—É–¥–∞
        
        if products:
            for product in products:
                caption = (
                    f"üî∏ **{product.name}**\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                )
                
                # –¢—É–≥–º–∞–∏ "–•–∞—Ä–∏–¥" –±–æ –Ω–∞—Ä—Ö
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"–•–∞—Ä–∏–¥ {product.price} —Å–æ–º–æ–Ω”£", callback_data=f"buy_{product}_{product.id}")]
                ])
                
                if product.image_url:
                    await callback_query.message.answer_photo(
                        photo=product.image_url, 
                        caption=caption, 
                        reply_markup=keyboard, 
                        parse_mode="Markdown"
                    )
                else:
                    await callback_query.message.answer(caption, reply_markup=keyboard, parse_mode="Markdown")
                
                displayed_products += 1  # –¢–µ—ä–¥–æ–¥–∏ –Ω–∞–º–æ–∏—à—à—É–¥–∞—Ä–æ –∑–∏—ë–¥ –∫—É–Ω
                
           
                text = f"üìã –ê–∑ {total_products} –Ω–∞–º—É–¥–∏ –º–∞“≥—Å—É–ª–æ—Ç, {displayed_products} –Ω–∏—à–æ–Ω –¥–æ–¥–∞ —à—É–¥."
                
                exit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"exit_to_main_menu")]
                ])
                
                await callback_query.message.answer(text = text, reply_markub=exit_keyboard, parse_mode="Markdown")
        else:
            await callback_query.message.answer("–ú–∞“≥—Å—É–ª–æ—Ç –¥–∞—Ä –∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        
    await callback_query.answer()



# “≤–∞–Ω–≥–æ–º–∏ –ø–∞—Ö—à–∏ —Ç—É–≥–º–∞–∏ "–ù–∞–∑–∞–¥", –∏–Ω —Ñ—É–Ω–∫—Å–∏—è —Ñ–∞—Ä–æ –≥–∏—Ä–∏—Ñ—Ç–∞ –º–µ—à–∞–≤–∞–¥
@start_router.callback_query(lambda c: c.data == "exit_to_main_menu")
async def exit_to_main_menu_handler(callback_query: CallbackQuery):
    bot = callback_query.bot
    keyboard = await get_category_keyboard()
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard
    )